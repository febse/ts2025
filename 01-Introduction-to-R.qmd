# Introduction to R

During the first classes we discussed the basic structure of an R Markdown document and how we can mix `R` code and text to create documents.

A R Markdown document is a pure text file that you can open in any text editor (e.g. Notepad, Emacs, Kate, etc.). It consists of two parts: the header at the top of the file. The header starts with three dashes on a separate line and ends with three dashes on a separate line. Between the dashes you can specify different options in a `yml` format such as the author and title of the document, but these will be generally irrelevant for our course and we will ignore them.

In the body of the document we write code in code chunks that start with three backticks and end with three backticks. After the first sequence of backticks there is a language identifier which in our case will always be `r`.

It may be easier to work with R Markdown documents in R Studio's `Visual` mode. After opening a R Markdown document, you will find two buttons (`Source` and `Visual`) just below the file name (below the save file icon). Click the `Visual` button to activate it. After that you will be able to click on the `Insert` menu and add code chunks from `Insert` -\> `Executable Cell` -\> `R`.

To run a code chunk, find the green `Run` button on the top right side of the chunk and click on it. You will see the printed output of the chunk below it. Note that some chunks do not print any output (e.g. chunks that only contain assignments).

```{r}
if (!requireNamespace("tidyverse", quietly = TRUE)) {
  install.packages("tidyverse")
}

library(tidyverse)
```

You can find more information and video tutorials about R Markdown [here](https://rmarkdown.rstudio.com/).

::: callout-note
## Keyboard Shortcuts

A lot of the work in R Studio can be done using keyboard shortcuts. This can speed up your workflow and make you more productive.

-   `Ctrl+Enter`: Run the current line or selection
-   `Ctrl+Shift+Enter`: Run the current chunk
-   `Ctrl+Alt+i`: Insert a new R code chunk

You can find more shortcuts and a concise overview of the elements of R Studio in the [R Studio Cheatsheet](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf).

For a complete list of shortcuts, you can go to `Help` -\> `Keyboard Shortcuts Help`.

:::

## Arithmetic Operations

```{r}
1 + 4
3 - 2
2 * 8
2 / 8
2^4
```

## Assignment

Very often we want to store a value in the memory of the computer so that we can reuse it later. In R we store values under *names* (variables) by using the assignment operator \`\<-\` Shortcut for the assignment operator:

::: callout-warning
## Assignment Operator Shortcut

You can insert the whole `<-` operator by pressing `Alt -` (minus). It is important to note that `<-` and `< -` (with space between the characters) do completely different things (see below).
:::

```{r}
y <- 34
y - 40
```

```{r}
y < - 34
```

Run this chunks and look at the global environment (right side of R Studio) to see it appear in the list of objects.

::: {#exr-r-arithmetc}
## Arithmetic Operations

Create two new variables called `x1` and `x2` and assign them the values 3 and 4, respectively. Then create a new variable called `y` and assign it the value of the sum of `x1` and `x2`. Print the value of `y` to the console either by placing the variable name in the last line of the code chunk or by using the `print` function.
:::

```{r}
# Write you code here
x1 <- 3
x2 <- 4
x1 + x2
```

## Numeric Vectors

It is very common to group values that belong together in a single structure. By default numeric vectors in R are created as double precision floating point numbers. You can create a numeric vector using the `c` (concatenate) function.

```{r}
x <- c(1, 4)
x
```

```{r}
## Length, average, sum of a numeric vector
mean(x)
sum(x)
length(x)
```

```{r}
## Documentation
# ?mean
```

Vectors can only hold data of the same type: either numeric, character, or logical. If you try to create a vector with different types of data, R will coerce the data to the same type. For example, if you try to create a vector with a number and a string, R will coerce the number to a string.

::: {#exr-r-vector-arithmetic}
## Vector Assignment

Create a new variable called `incomes` and assign it the values 100, 200, 300, 400, 500 (you can just copy these values from here and paste them in the code chunk). Remember to use the `c` function to pack the values into a vector.

-   Compute the average income and the total income and store them into the variables `income_avg` and `income_total`, respectively. Use the `mean` and `sum` functions to calculate the values.
-   Subtract the average income from each element of the vector and store the result in a new variable called `income_diff`. Print the result to the console.
-   Compute the average of the new vector `income_diff`. Is the result surprising?
:::

```{r}
# Write your code here

incomes <- c(100, 200, 300, 400, 500)
income_avg <- mean(incomes)
income_total <- sum(incomes)
income_diff <- incomes - income_avg

income_diff
mean(income_diff)
```

## Character Vectors

There are three types of vectors in R: numeric, character, and logical. Character vectors are used to store text data. When you write text in R, you need to enclose it in quotes. You can use either single or double quotes, but you need to be consistent.

```{r}
z1 <- "Hello World"
z <- c("Alpha", "Bravo", "Charlie", "Delta", "Echo")
```

::: callout-warning
## Case Sensitivity

R is a case-sensitive language. This means that `Hello` and `hello` are two completely different strings. This also applies to function names. For example, `mean` and `Mean` are two different functions in R. Uncomment (remove the \# character from the beginning of the second line) and run the following code chunk to see the error message that R will produce.
:::

```{r}
mean(x)
# Mean(x)
```

## Recycling

As you have already noticed in @exr-r-vector-arithmetic, R is a vectorized language. This means that most operations are performed element-wise on vectors. In most situations this is a convenient feature, because it allows you to write concise and readable code. However, you should be aware of how R handles operations on vectors of different lengths. If you try to perform an operation on two vectors of different lengths, R will recycle the shorter vector to match the length of the longer vector. This is called *recycling* or *broadcasting*.

Let's run an example to see how recycling works. We want to add a scalar to each element of a vector. Mathematically, this does not make sense, because you can only add/subtract element-wise two vectors of the same length. However, R will recycle the scalar to match the length of the vector. Recycling means that it creates a new vector by repeating the shorter vector until it has the same length as the longer vector.

```{r}
c(2, 5) + 1
```

```{r}
c(2, 3, 5, 7) + c(10, 20)
c(2, 3, 5, 7) / c(10, 20)
```

Take care when using recycling, because it can lead to unexpected results. For example, if you try to add two vectors of different lengths, R will still recycle the shorter vector to match the length of the longer vector, but it will also issue a warning.

```{r}
c(1, 2, 10) + c(2, 5)
```

Pay attention to the warning message. It is telling you that the shorter vector is being recycled to match the length of the longer vector but it cannot expand the shorter vector to match the longer vector exactly. Although this is not an error that will stop your program, most of the time, this is not what you want and is a result from some error before it. You should not rely on recycling vectors of incompatible lengths. Instead, you should be explicit about what you want to do.

## Logical Operators and Logical Values

There are two logical values: `TRUE` and `FALSE`. These emerge from logical operations and indicate whether some condition is fulfilled (`TRUE`) or not `FALSE`. You will find similar constructs in all other languages, where this type of data is commonly known as *boolean* or *binary* (i.e., only two values).

The basic logical operators in `R` are

```{r}
## Less than
2 < 5
## Less than or equal
2 <= 5
## Greater than
2 > 5
## Greater or equal
2 >= 5
## Exactly equal
2 == 5

"Text 2" == "Text 2"
```

```{r}
c(1, 2, 3, 4) == 2
```

```{r}
c(1, 2, 3, 4) > 2
```

```{r}
c(1, 2, 3, 4) < 2
```

```{r}
c(1, 2, 3, 4) <= 2
```

```{r}
c(1, 2, 3, 4) >= 2
```

```{r}
some_char_vector <- c("India", "Foxtrot", "Golf", "Hotel", "India")
some_char_vector == "India"
```

::: callout-warning
## Strict Equality and Floating Point Numbers

Strict equality generally makes sense for strings and integers, but not for floating point numbers! This is because real numbers cannot be stored exactly in memory and computers work with finite precision. This can lead to unexpected results when comparing floating point numbers. For example, you may get a result like this:

```{r}
sqrt(2)^2 == 2
```

Mathematically, $\sqrt(2)^2$ is exactl yequal to 2, but the comparison in `R` returns `FALSE`.

When printing the number in the console you may not see the difference because the print function formats the number. To compare floating point numbers, you should use the `all.equal` function, which takes into accounts for the finite precision of floating point numbers.

```{r}
all.equal(sqrt(2)^2, 2)
```
:::

::: {#exr-r-logical-operators}
## Logical Operators and Logical Values

Use the `incomes` vector from the previous exercise. Create a new vector called `is_high_income` that holds the logical values of whether the income is greater than the average. Count the number of elements with high income and find the proportion of high incomes.
:::

```{r}
# Write you code here
is_high_income <- incomes > income_avg
sum(is_high_income)
mean(is_high_income)
```

## Indexing

You can access elements of a vector using the square brackets. The index of the first element is 1, not 0 (this is different from many other programming languages). You can also use negative indices to exclude elements from the vector.

```{r}
expenses <- c(100, 200, 300, 400, 500)
expenses[1]
```

```{r}
expenses[2:4]
```

```{r}
expenses[-1]
```

You can also use logical vectors to index a vector.

```{r}
expenses[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
```

::: {#exr-r-indexing}
## Indexing

Use the `incomes` vector from the previous exercise. Create a new vector called `is_low_income` that holds the logical values of whether the income is less than the average. Select all elements from the `incomes` vector that are low income. How many low income elements are there?
:::

```{r}
# Write you code here
is_low_income <- incomes < income_avg
is_low_income[length(is_low_income)]

incomes[is_low_income]
length(incomes[is_low_income])
```

## Pipes

We will use the example to introduce [pipes](https://r4ds.had.co.nz/pipes.html).

You can think about the `pipe` operator as the word "then". For example, in human language the following would be the sentence.

Take the data in `x` and **then** (pipe) apply the mean function.

```{r}
x <- c(-1, 1, 1)
x %>% mean()
```

This makes the code more readable and easier to understand. The pipe operator is `%>%` in R (you may also encounter \|\>). The following will read as:

Take the values in `x`, then (pipe) pass them to the `mean` function, then (pipe) take the result of the `mean` funciton and pass it to the `abs` function (calculates the absolute value), then (pipe) pass the result from `abs` to the `sqrt` function (calculates the square root), then (pipe) round the result to two decimal places (`round`).

::: callout-info
## Shortcut for the Pipe Operator

You can use the keyboard shortcut `Ctrl + Shift + M` to insert the pipe operator in R Studio.
:::

```{r}
x %>% 
  mean() %>%  
  abs() %>%  
  sqrt() %>% 
  round(2)
```

This is a lot nicer and easier to read than the equivalent

```{r}
round(sqrt(abs(mean(x))), 2)
```

::: {#exr-r-pipes}
## Pipes

Compute the square root of the numbers 2 and three, then take the (natural) logarithm of the result and round it to three decimal places. Compute the result

1.  Using nested function calls
2.  Using the pipe operator

*Hint*: use the functions `sqrt`, `log`, and `round`.

$$
\log{\sqrt{2}} \quad \text{and} \quad \log{\sqrt{3}}
$$
:::

```{r}
# Write your code here

round(log(sqrt(2)), digits=3)
round(log(sqrt(3)), digits=3)
round(log(sqrt(c(2, 3))), digits=3)

2 %>% 
  sqrt() %>% 
  log() %>% 
  round(3)

3 %>%
  sqrt() %>%
  log() %>%
  round(3)

# Or the two in one line

c(2, 3) %>% 
  sqrt() %>% 
  log() %>% 
  round(3)
```

## Factors (optional)

Factors are used to represent categorical data (e.g., sex: male/female, employment status: employed, unemployed, retired, etc.). They are stored as integers and have labels associated with them. Factors are important in statistical modeling and are commonly used in plotting functions. Factors are not strings, they are integers with labels.

```{r}
some_vector <- c("A", "B", "A", "C", "B", "A")
some_factor <- factor(some_vector)
some_factor

levels(some_factor)
```

You can coerce (convert) a factor to an integer vector using the `as.integer` function.

```{r}
as.integer(some_factor)
```

You can coerce (convert) as factor to a character vector using the `as.character` function.

```{r}
as.character(some_factor)
```

Factors have also some safeguards. If you try to perform an operation that is not defined for factors, R will issue a warning. For example, you cannot meaningfully add a number to a factor. Note that this will only raise a *warning*, not an *error*.

```{r}
some_factor + 1
```

```{r}
some_factor[1] <- "Some undefined level"
some_factor
```

Read more about factors in the [R documentation](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Factors), as well as the section on factors [here](https://r4ds.hadley.nz/factors)

## Functions (optional)

Functions are a fundamental building block most languages, including R. They are used to carry out a specific task and encapsulate a sequence of steps. You can avoid repeating the same code over and over again by abstracting the code into a function.

You can think of a function as a recipe. It takes some ingredients (arguments) and returns a dish (output).

Let's look at some examples of functions in R, without going into too much detail.

To define a function, you use the `function` keyword and assign the function to a variable. The function is then called by using the variable name and passing the arguments in parentheses. The function has a body that is enclosed in curly braces.

Let's write a function that takes two numbers and returns TRUE or FALSE depending on whether the sum of the arguments is odd. Functions return the value of the last expression in the body of the function unless you explicitly use the `return` keyword.

```{r}
is_even_sum <- function(x, y) {
  (x + y) %% 2 == 0
}

is_even_sum(2, 3)
is_even_sum(2, 4)
```

The `%%` operator is the modulo operator. It returns the remainder of the division of the first number by the second number.

```{r}
2 %% 2
3 %% 2
```

Writing functions is a large topic and we will not cover all the details in this course. You can find more information about functions in R in the [R documentation](https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Functions).

A thing to note is that R is (mostly) a functional programming language and functions generally do not modify their arguments. This means that if you pass a variable to a function and the function modifies that variable, the original value will not be changed. This is different from many other languages, where functions can modify their arguments. The reason for this is that arguments are copied when they are passed to a function. This is done to avoid side effects and make the code easier to reason about.

```{r}
x <- c(1, 2, 3)

f <- function(y) {
  y[1] <- 100
  y
}

f(x)
x
```

The function above assigns a value to the first element of the vector `y` and returns the modified vector. However, the original vector `x` is not modified, because `y` is a copy of `x`.

```{r}
s1 <- c(4, 1, 2, 3)
s1
s1[1] <- 100
s1
```